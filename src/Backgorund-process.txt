Step wise Building of this project :- 

Ref: https://www.freecodecamp.org/news/build-a-snake-game-with-react-redux-and-redux-sagas/#prerequisites

** Setting React Application and Data Layer

1. First we setup the basic project with React and Typescript.

2. Configure this project with a global state ( REDUX ) and for handling side-effects used (Redux-Saga).

Codes : 

a. npx create-react-app snake-game
b. cd snake-game
c. npm run start
d. npm install redux react-redux redux-saga
e. mkdir store

Store Structure - 
store/
├── actions
│   └── index.ts
├── reducers
│   └── index.ts
└── sagas
    └── index.ts
├── index.ts

** Understanding UI Layer - Consists of 3 Layers

a. Score Calculator
b. Canvas Board
c. Instructions

Explanation: Most Important Component is Canvas Board consists of HTML element - canvas.

context of canvas 
- Provides all the information of the canvas element. 
- It gives the dimenstion of the canvas and helps to draw on the canvas
- getCanvas('2d') function helps in getting the context of the canvas which returns the 2d context of the canvas; return type is "CanvasRenderingContext2D" interface

Vanilla JS : We can get the context like below:-

const canvas = document.querySelector("canvas");
const canvasCtx = canvas.getContext('2d);

But in React, we need to create the ref and pass it to the canvas element so that later we can use it in different hooks.

So After getting the Context, we need to do three things - 
a. clear the canvas - it will be done multiple times so we need to create a utility fn 
b. Draw snake with current position
c. Draw a fruit at a random position inside the box

Score Calulator - 

Cases : 
a. Whenever the snake eats a fruit and it doesn't collide with itself as well as boundary of canvas, the score increases.

Calculating the reward - 
1. Increase the size of snake - by appending new x and y coordinates at the end of the snake array which is less than 20 from the last element
2. Increase the score - 
    a. dispatch an action : INCREMENT_SCORE , 
    b. action creator -  increaseSnake() - type: INCREASE_SNAKE
    c. update gameReducer with the new action type : INCREASE_SNAKE
    d. Component - 
            a. set a state variable : isConsumed ? when the head of the snake is equal to the position of the fruit 
            b. Once the fruit consumed, increase the size of snake using another useEffect
3. Place a new fruit at a different random location - we need to randomly generate a fruit at another location which we will do in the above useEffect 

4. Increase the score card each time - create a new variable at global level called score and update this.

Collision Detection: 

1. Either collides with self 
2. or collides with the boundary of the canvas


5. Instructions Component

-- ResetBoard
    a. Remove the event listner from window object
    b. dispatch the resetGame action
    c. dispatch the reset score on score scoreUpdates
    d. clear the canvas
    e. draw the snake at its initial position
    f. draw the fruit at new random position
    g. Add the listner to restart the game


-- BUGS --
1. Whenever the fruit is consumed, score increased 2*original score - Because the action is dispatched twice

